/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-02-10 06:29:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax.news;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class newsDisplay_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	//호출하지 않아도 자돈실행\r\n");
      out.write("	//jquery(document)\r\n");
      out.write("	//window <-document<-ready(function(){실행문:변수선언, if문, switch문, i+j}) 함수\r\n");
      out.write("	$(document).ready(()=>{\r\n");
      out.write("		//실행문\r\n");
      out.write("		start =()=>{\r\n");
      out.write("			setInterval(autoReload,2000);\r\n");
      out.write("		}\r\n");
      out.write("		//function start(){}\r\n");
      out.write("		start();\r\n");
      out.write("	})//end of ready\r\n");
      out.write("	</script>\r\n");
      out.write("	<div id=\"d_news\">뉴스준비중.....</div>\r\n");
      out.write("	");

		out.print("<font color='red'size=18>안녕</font>");
	
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	  const autoReload =()=>{\r\n");
      out.write("		console.log('autoReload 호출')\r\n");
      out.write("		//ajax함수는 jqeury.min.js가 제공하는 api이다\r\n");
      out.write("		//ajax함수는 결국 XMLHttpRequest대신함\r\n");
      out.write("		//const ajax = new XMLHttpRequest();\r\n");
      out.write("		//ajax.open(\"GET\",url,false)\r\n");
      out.write("		//ajax.send()\r\n");
      out.write("		$.ajax({\r\n");
      out.write("	          type: \"GET\",\r\n");
      out.write("	          url: \"newsList.jsp\",\r\n");
      out.write("	          dataType:\"html\",\r\n");
      out.write("	          success: function (data) {//성공했을 때\r\n");
      out.write("	            //console.log(data);  \r\n");
      out.write("	            $(\"#d_news\").html(data);\r\n");
      out.write("	          },\r\n");
      out.write("	          error:function(request,status,error){\r\n");
      out.write("	        	  console.log('error')\r\n");
      out.write("	        	  console.log('error'+request.status)\r\n");
      out.write("	        	  console.log('error'+request.responseText)\r\n");
      out.write("	          }\r\n");
      out.write("	        });\r\n");
      out.write("	  }\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("<!-- \r\n");
      out.write("	html(단방향, 변수선언이나 제어문 지원안됨, 이벤트 처리불가)은 순차적으로 실행\r\n");
      out.write("	자바스크립트 코드의 위치에 따라서 document.querySelector(id or class or ele)\r\n");
      out.write("	: 선언이 먼저\r\n");
      out.write("	자바스크립트 위치\r\n");
      out.write("	1) head안에 - 전변선언, 함수선언 할 때(호출을 해야 실행됨)\r\n");
      out.write("	만일 이것을 지연하고 싶을 떄 - defer - 미룬다 - HTML, DOM Tree그린다.\r\n");
      out.write("	2) body안에 - 호출하지 않아도 실행됨 - 단 함수로 선언된 부분 제외\r\n");
      out.write("	\r\n");
      out.write("	자바스크립트로 화면을 그릴 수 있다.\r\n");
      out.write("	document.write(\"<font color='red'size=18></font>\")\r\n");
      out.write("	\r\n");
      out.write("	write는 어디다 쓰는 건가여? - 브라우저\r\n");
      out.write("	\r\n");
      out.write("	Java는 브라우저에 쓸 수 없다.\r\n");
      out.write("	\r\n");
      out.write("	System.out.println(\"<b>굵은글씨</b>\"\r\n");
      out.write("	\r\n");
      out.write("	out.print();\r\n");
      out.write("	\r\n");
      out.write("	jsp라고 쓰고 html이라고 읽기\r\n");
      out.write("	jsp라고 쓰꼬 json이라고 읽기\r\n");
      out.write("	image/png\r\n");
      out.write("	image/jpg\r\n");
      out.write("	image/gif\r\n");
      out.write("	메인타입 / 서브타임\r\n");
      out.write("	text/html\r\n");
      out.write("	text/css\r\n");
      out.write("	text/javascript\r\n");
      out.write("	text/module\r\n");
      out.write("	text/babel\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write(" -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
